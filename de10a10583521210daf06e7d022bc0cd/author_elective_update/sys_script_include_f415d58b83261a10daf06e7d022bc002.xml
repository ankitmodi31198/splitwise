<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_splitwise.GroupManager</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>GroupManager</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var GroupManager = Class.create();
GroupManager.prototype = {
    initialize: function() {},

    // This method will handle both creating a group and fetching available users
    process: function() {
        try {
            var action = this.getParameter('action');
            
            if (!action) {
                gs.error('Missing action parameter.');
                return JSON.stringify({ status: 'error', message: 'Action parameter is missing' });
            }

            if (action === 'getAvailableUsers') {
                return this.getAvailableUsers();
            } else if (action === 'createGroup') {
                return this.createGroup();
            } else {
                gs.error('Unknown action: ' + action);
                return JSON.stringify({ status: 'error', message: 'Unknown action' });
            }
        } catch (e) {
            gs.error('Error in GroupManager process: ' + e.message);
            return JSON.stringify({ status: 'error', message: 'Unexpected error occurred.' });
        }
    },

    // Fetch available users for the group
    getAvailableUsers: function() {
        var response = {
            availableUsers: []
        };

        try {
            var userGR = new GlideRecord('sys_user');
            userGR.query();
            
            while (userGR.next()) {
                response.availableUsers.push({
                    sys_id: userGR.getValue('sys_id'),
                    name: userGR.getValue('name')
                });
            }

            if (response.availableUsers.length === 0) {
                gs.warn('No users found.');
            }
        } catch (error) {
            gs.error('Error fetching users: ' + error.message);
            return JSON.stringify({ status: 'error', message: 'Error fetching users.' });
        }

        return JSON.stringify(response);  // Return as JSON
    },

    // Create a group and add users
    createGroup: function() {
        var response = {
            status: 'error',
            message: ''
        };

        try {
            var groupName = this.getParameter('groupName');
            var groupDescription = this.getParameter('groupDescription');
            var userIds = this.getParameter('userIds');
            
            if (!groupName || !userIds) {
                response.message = 'Group name and user IDs are required.';
                return JSON.stringify(response);
            }

            userIds = JSON.parse(userIds);  // Parse user IDs
            
            if (userIds.length === 0) {
                response.message = 'At least one user is required.';
                return JSON.stringify(response);
            }

            // Create the group
            var groupRecord = new GlideRecord('sn_splitwise_groups');
            groupRecord.initialize();
            groupRecord.setValue('name', groupName);
            groupRecord.setValue('description', groupDescription || '');
            groupRecord.setValue('sys_created_by', gs.getUser().getID());
            var groupSysId = groupRecord.insert();

            // Add users to the group
            userIds.forEach(function(userId) {
                var groupMember = new GlideRecord('sn_splitwise_group_members');
                groupMember.initialize();
                groupMember.setValue('group', groupSysId);
                groupMember.setValue('user', userId);
                groupMember.setValue('sys_created_by', gs.getUser().getID());
                groupMember.insert();
            });

            response.status = 'success';
            response.message = 'Group created successfully!';
            response.groupSysId = groupSysId;
        } catch (error) {
            gs.error('Error creating group: ' + error.message);
            response.message = 'An unexpected error occurred. Please try again later.';
        }

        return JSON.stringify(response);
    },

    type: 'GroupManager'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-22 21:09:31</sys_created_on>
        <sys_id>f415d58b83261a10daf06e7d022bc002</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>GroupManager</sys_name>
        <sys_package display_value="Splitwise" source="sn_splitwise">de10a10583521210daf06e7d022bc0cd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Splitwise">de10a10583521210daf06e7d022bc0cd</sys_scope>
        <sys_update_name>sys_script_include_f415d58b83261a10daf06e7d022bc002</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-22 21:11:33</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="DELETE">
        <id>f415d58b83261a10daf06e7d022bc002</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-22 21:09:31</sys_created_on>
        <sys_id>d825ddc783261a10daf06e7d022bc03c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-22 21:09:31</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Splitwise">de10a10583521210daf06e7d022bc0cd</application>
        <file_path/>
        <instance_id>add57f3000521210ac1fc988b26642fa</instance_id>
        <instance_name>glide_db_dump</instance_name>
        <name>sys_script_include_f415d58b83261a10daf06e7d022bc002</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;sn_splitwise.GroupManager&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;GroupManager&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[var GroupManager = Class.create();
GroupManager.prototype = {
    initialize: function() {},

    // This method will handle both creating a group and fetching available users
    process: function() {
        try {
            var action = this.getParameter('action');
            
            if (!action) {
                gs.error('Missing action parameter.');
                return JSON.stringify({ status: 'error', message: 'Action parameter is missing' });
            }

            if (action === 'getAvailableUsers') {
                return this.getAvailableUsers();
            } else if (action === 'createGroup') {
                return this.createGroup();
            } else {
                gs.error('Unknown action: ' + action);
                return JSON.stringify({ status: 'error', message: 'Unknown action' });
            }
        } catch (e) {
            gs.error('Error in GroupManager process: ' + e.message);
            return JSON.stringify({ status: 'error', message: 'Unexpected error occurred.' });
        }
    },

    // Fetch available users for the group
    getAvailableUsers: function() {
        var response = {
            availableUsers: []
        };

        try {
            var userGR = new GlideRecord('sys_user');
            userGR.query();
            
            while (userGR.next()) {
                response.availableUsers.push({
                    sys_id: userGR.getValue('sys_id'),
                    name: userGR.getValue('name')
                });
            }

            if (response.availableUsers.length === 0) {
                gs.warn('No users found.');
            }
        } catch (error) {
            gs.error('Error fetching users: ' + error.message);
            return JSON.stringify({ status: 'error', message: 'Error fetching users.' });
        }

        return JSON.stringify(response);  // Return as JSON
    },

    // Create a group and add users
    createGroup: function() {
        var response = {
            status: 'error',
            message: ''
        };

        try {
            var groupName = this.getParameter('groupName');
            var groupDescription = this.getParameter('groupDescription');
            var userIds = this.getParameter('userIds');
            
            if (!groupName || !userIds) {
                response.message = 'Group name and user IDs are required.';
                return JSON.stringify(response);
            }

            userIds = JSON.parse(userIds);  // Parse user IDs
            
            if (userIds.length === 0) {
                response.message = 'At least one user is required.';
                return JSON.stringify(response);
            }

            // Create the group
            var groupRecord = new GlideRecord('sn_splitwise_groups');
            groupRecord.initialize();
            groupRecord.setValue('name', groupName);
            groupRecord.setValue('description', groupDescription || '');
            groupRecord.setValue('sys_created_by', gs.getUser().getID());
            var groupSysId = groupRecord.insert();

            // Add users to the group
            userIds.forEach(function(userId) {
                var groupMember = new GlideRecord('sn_splitwise_group_members');
                groupMember.initialize();
                groupMember.setValue('group', groupSysId);
                groupMember.setValue('user', userId);
                groupMember.setValue('sys_created_by', gs.getUser().getID());
                groupMember.insert();
            });

            response.status = 'success';
            response.message = 'Group created successfully!';
            response.groupSysId = groupSysId;
        } catch (error) {
            gs.error('Error creating group: ' + error.message);
            response.message = 'An unexpected error occurred. Please try again later.';
        }

        return JSON.stringify(response);
    },

    type: 'GroupManager'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-12-22 21:09:31&lt;/sys_created_on&gt;&lt;sys_id&gt;f415d58b83261a10daf06e7d022bc002&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;GroupManager&lt;/sys_name&gt;&lt;sys_package display_value="Splitwise" source="sn_splitwise"&gt;de10a10583521210daf06e7d022bc0cd&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="Splitwise"&gt;de10a10583521210daf06e7d022bc0cd&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_f415d58b83261a10daf06e7d022bc002&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-12-22 21:11:33&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;f415d58b83261a10daf06e7d022bc002&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-12-22 21:09:31&lt;/sys_created_on&gt;&lt;sys_id&gt;d825ddc783261a10daf06e7d022bc03c&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-12-22 21:09:31&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;true&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>856258062</payload_hash>
        <record_name>GroupManager</record_name>
        <reverted_from/>
        <source>06d1d7f583ae9610daf06e7d022bc033</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-22 21:11:33</sys_created_on>
        <sys_id>46955d8b83261a10daf06e7d022bc04b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>193f03608c90000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-22 21:11:33</sys_updated_on>
        <type>Script Include</type>
        <update_guid>ca955d8bb7261a10617fed99daa9774a</update_guid>
        <update_guid_history>ca955d8bb7261a10617fed99daa9774a:856258062,9655198b66261a10dc91396f44a42d02:397380028,6025d58b72261a100a9b95109615aec5:-36214502</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-22 21:12:48</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>ad3dd08568654efc93c39426db2e3090</sys_id>
        <sys_metadata>f415d58b83261a10daf06e7d022bc002</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GroupManager</sys_name>
        <sys_package display_value="Splitwise" source="sn_splitwise">de10a10583521210daf06e7d022bc0cd</sys_package>
        <sys_parent/>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Splitwise">de10a10583521210daf06e7d022bc0cd</sys_scope>
        <sys_scope_delete display_value="">1bbf902f56684a4e8bdca6050439e3c4</sys_scope_delete>
        <sys_update_name>sys_script_include_f415d58b83261a10daf06e7d022bc002</sys_update_name>
        <sys_update_version display_value="sys_script_include_f415d58b83261a10daf06e7d022bc002">46955d8b83261a10daf06e7d022bc04b</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-22 21:12:48</sys_updated_on>
    </sys_metadata_delete>
</record_update>
